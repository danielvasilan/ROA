--------------------------------------------------------
--  DDL for Package Body PKG_AC
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "PKG_AC" 
AS

procedure p_clear_fucking_dupl
is
begin
    delete from item_cost
    where idriga in
    (
    select --item_code, period_code, colour_code, size_code, season_code, oper_code_item, count(1),
            min(idriga) min_id
            --min(unit_cost), max(unit_cost)
    from item_cost a
    where cost_code = 'CMP'
    group by org_code, item_code, period_code, colour_code, size_code, season_code, oper_code_item
    having count(1) > 1
    );
end;


/**********************************************************************************************
    DDL:    12/07/2008  d   Create date
/*********************************************************************************************/
FUNCTION f_uom_myself  (   p_uom_code              VARCHAR2,
                            p_uom_code_my           VARCHAR2,
                            p_conversion    IN OUT  NUMBER
                        )   RETURN                  VARCHAR2
IS

    v_row_um            PRIMARY_UOM%ROWTYPE;
    v_row_um_my         PRIMARY_UOM%ROWTYPE;
    v_rez               VARCHAR2(500);

BEGIN

    v_row_um.puom       :=  p_uom_code;
    IF NOT Pkg_Get2.f_get_primary_uom_2 (v_row_um) THEN v_rez:='Nu exista UM sursa->'||p_uom_code; END IF;

    v_row_um_my.puom    :=  p_uom_code_my;
    IF NOT Pkg_Get2.f_get_primary_uom_2 (v_row_um_my) THEN v_rez:='Nu exista UM dest->'||p_uom_code_my; END IF;

    IF v_row_um.si_uom  <>  v_row_um_my.si_uom THEN
        v_rez       :=  'Unitatile de masura nu au aceeasi unitate de masura standard !';
        p_conversion:=  0;
    ELSE
        p_conversion := v_row_um.si_conversion / v_row_um_my.si_conversion;
    END IF;

    RETURN v_rez;
END;

/**********************************************************************************************
    DDL:    26/05/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_prep_log_vs_ac  (   p_year_month    VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE :   prepaires data in VW_PREP_LOG_VS_AC with all the warehouse transactions
--              for a month and the accounting documents generated by them
----------------------------------------------------------------------------------------------
IS
PRAGMA AUTONOMOUS_TRANSACTION;

    CURSOR C_LINES      (   p_start_date DATE, p_end_date DATE)
                        IS
                        SELECT      th.idriga       ref_trn,
                                    th.org_code, th.trn_year, th.trn_code,th.trn_date, th.trn_type,
                                    th.date_legal, th.flag_storno,
                                    th.doc_year, th.doc_code, th.doc_date,
                                    ah.org_code         ac_org_code,
                                    ah.date_legal       ac_date_legal,
                                    ah.doc_code         ac_doc_code,
                                    ah.doc_year         ac_doc_year,
                                    ah.doc_type         ac_doc_type,
                                    ah.status           ac_status,
                                    ah.currency_code    ac_currency_code,
                                    d.report_object     d_report_object,
                                    -----
                                    (
                                    SELECT  MAX(i.group_code)
                                    FROM    WHS_TRN_DETAIL i
                                    WHERE   i.ref_trn = th.idriga
                                    )   group_code
                        -----------------------------------------------------------------------
                        FROM        WHS_TRN         th
                        INNER JOIN  MOVEMENT_TYPE   m   ON  m.trn_type  =   th.trn_type
                        LEFT JOIN   AC_HEADER       ah  ON  ah.ref_trn  =   th.idriga
                        LEFT JOIN   AC_DOCUMENT     d   ON  d.doc_type  =   ah.doc_type
                        -----------------------------------------------------------------------
                        WHERE       th.date_legal   BETWEEN p_start_date
                                                        AND p_end_date
                            AND     m.accounting    =   'Y'
                            AND     th.flag_storno  IN  ('N','C')
                        ORDER BY    th.date_legal
                        ;

    TYPE typ_rep        IS TABLE OF VW_PREP_LOG_VS_AC%ROWTYPE             INDEX BY PLS_INTEGER;
    it_rep              typ_rep;
    v_idx               PLS_INTEGER;
    v_row               VW_PREP_LOG_VS_AC%ROWTYPE;

BEGIN

    DELETE FROM VW_PREP_LOG_VS_AC;

    v_row.segment_code  :=  'VW_PREP_LOG_VS_AC';

    FOR x IN C_LINES (TO_DATE(p_year_month,'yyyymm'), LAST_DAY(TO_DATE(p_year_month,'yyyymm')))
    LOOP
        v_idx               :=  it_rep.COUNT + 1;

        v_row.org_code      :=  x.org_code;
        v_row.date_legal    :=  x.date_legal;
        v_row.ref_trn       :=  x.ref_trn;
        v_row.trn_year      :=  x.trn_year;
        v_row.trn_code      :=  x.trn_code;
        v_row.trn_date      :=  x.trn_date;
        v_row.trn_type      :=  x.trn_type;
        v_row.flag_storno   :=  x.flag_storno;

        IF x.doc_code   IS NOT NULL THEN
            v_row.log_doc_info  :=  RPAD(x.doc_code,10)||'-'||TO_CHAR(x.doc_date,'yy/mm/dd');
        ELSE
            v_row.log_doc_info  :=  x.group_code;
        END IF;
        v_row.ac_date_legal :=  x.ac_date_legal;
        v_row.ac_doc_code   :=  x.ac_doc_code;
        v_row.ac_doc_year   :=  x.ac_doc_year;
        v_row.ac_doc_type   :=  x.ac_doc_type;
        v_row.ac_status     :=  x.ac_status;
        v_row.currency_code :=  x.ac_currency_code;
        v_row.report_object :=  x.d_report_object;
        v_row.ac_org_code   :=  x.ac_org_code;

        it_rep(v_idx)       :=  v_row;

    END LOOP;

    IF it_rep.COUNT > 0 THEN
        FORALL i IN it_rep.FIRST..it_rep.LAST INSERT INTO VW_PREP_LOG_VS_AC VALUES it_rep(i);
    END IF;

    COMMIT;

END;


/**********************************************************************************************
    DDL:    26/05/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_generate_NIR    (   p_row_trh   WHS_TRN%ROWTYPE, p_org_myself VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE :   prepaires data in VW_PREP_LOG_VS_AC with all the warehouse transactions
--              for a month and the accounting documents generated by them
----------------------------------------------------------------------------------------------
IS

    CURSOR C_TRN_DETAIL     (p_ref_trn   NUMBER)
                            IS
                            SELECT      d.idriga,
                                        d.org_code, d.item_code, d.trn_sign,d.qty,
                                        d.reason_code, d.whs_code, d.colour_code, d.size_code, d.season_code,
                                        d.group_code, d.order_code, d.puom, d.oper_code_item,
                                        r.property          r_property,
                                        r.accounting        r_accounting,
                                        rd.qty_doc          rd_qty_doc,
                                        rd.qty_doc_puom     rd_qty_doc_puom,
                                        rd.qty_count_puom   rd_qty_count_puom,
                                        rd.price_doc        rd_price_doc,
                                        rd.price_doc_puom   rd_price_doc_puom,
                                        rd.uom_receipt      rd_uom_receipt,
                                        rd.puom             rd_puom,
                                        m.org_code_dst, m.item_code_dst,
                                        m.puom                  m_puom,
--                                        m.puom_dst              m_puom_dst,
                                        i.puom              id_puom,
                                        w.category_code     w_category_code
                            ----------------------------------------------------------------------
                            FROM        WHS_TRN_DETAIL  d
                            INNER JOIN  WHS_TRN_REASON  r   ON  r.reason_code   =   d.reason_code
                            INNER JOIN  WAREHOUSE       w   ON  w.whs_code      =   d.whs_code
                            LEFT  JOIN  ITEM_MAPPING    m   ON  m.org_code_src  =   d.org_code
                                                            AND m.item_code_src =   d.item_code
                                                            AND m.org_code_dst  =   Pkg_Glb.C_MYSELF
                            LEFT JOIN   RECEIPT_DETAIL  rd  ON  rd.idriga       =   d.ref_receipt
                            LEFT JOIN   ITEM            i   ON  i.org_code      =   m.org_code_dst
                                                            AND i.item_code     =   m.item_code_dst
                            ----------------------------------------------------------------------
                            WHERE       d.ref_trn       =   p_ref_trn
                                    AND r.accounting    =   'Y'
                            ;

    it_acd_prop             Pkg_Rtype.ta_ac_detail;
    it_acd_cust             Pkg_Rtype.ta_ac_detail;

    v_row_rec               RECEIPT_HEADER%ROWTYPE;
    v_row_ach_prop          AC_HEADER%ROWTYPE;
    v_row_ach_cust          AC_HEADER%ROWTYPE;
    v_row_acd               AC_DETAIL%ROWTYPE;
    v_idx                   PLS_INTEGER;
    v_conversion            NUMBER;
    v_error                 VARCHAR2(500);

    C_DOC_TYPE              VARCHAR2(32000)     :=  'AC';

BEGIN

    -- get RECEIPT_HEADER row
    v_row_rec.idriga    :=  p_row_trh.ref_receipt;
    Pkg_Get.p_get_receipt_header(v_row_rec);

    -- cycle on transaction's details
    FOR x IN C_TRN_DETAIL(p_row_trh.idriga)
    LOOP

        v_row_acd.ref_trn_detail    :=  x.idriga;
        v_row_acd.item_code         :=  x.item_code;
        v_row_acd.oper_code_item    :=  x.oper_code_item;
        v_row_acd.size_code         :=  x.size_code;
        v_row_acd.colour_code       :=  x.colour_code;
        v_row_acd.season_code       :=  x.season_code;
        v_row_acd.trn_sign          :=  x.trn_sign;
        v_row_acd.qty               :=  x.qty;
        v_row_acd.qty_puom          :=  x.rd_qty_count_puom;
        v_row_acd.qty_doc           :=  x.rd_qty_doc;
        v_row_acd.qty_doc_puom      :=  x.rd_qty_doc_puom;
        v_row_acd.unit_price        :=  x.rd_price_doc;
        v_row_acd.unit_price_puom   :=  x.rd_price_doc_puom;
        v_row_acd.uom               :=  x.rd_uom_receipt;
        v_row_acd.puom              :=  x.rd_puom;
        v_row_acd.whs_code          :=  x.whs_code;
        v_row_acd.group_code        :=  x.group_code;
        v_row_acd.order_code        :=  x.order_code;


        IF      x.r_property = 'Y'
            OR
                (NVL(x.r_property,'-') = '-' AND x.w_category_code = 'MPP') THEN
            v_idx                       :=  it_acd_prop.COUNT + 1;
            it_acd_prop(v_idx)          :=  v_row_acd;
            it_acd_prop(v_idx).org_code :=  p_org_myself;

            -- for org_code that is different from C_MYSELF must be a mapping in
            -- item_mapping for the managment on organization C_MYSELF
            IF      x.org_code   <> p_org_myself THEN
                IF x.org_code_dst  IS NULL THEN
                    Pkg_Err.p_err(  x.org_code ||'-'||x.item_code,
                                    'Nu exista cod corespunzator in gestiunea '||p_org_myself);
                END IF;
                it_acd_prop(v_idx).item_code        :=  x.item_code_dst;
                it_acd_prop(v_idx).uom              :=  x.id_puom;
                it_acd_prop(v_idx).puom             :=  x.id_puom;
                pkg_app_tools.p_log('D', 'DTZ', x.id_puom);
                v_error     :=  f_uom_myself(x.puom, x.id_puom, v_conversion);
                IF v_error IS NOT NULL THEN Pkg_Err.p_rae(v_error||' pentru '||x.item_code); END IF;
                it_acd_prop(v_idx).qty              :=  it_acd_prop(v_idx).qty * v_conversion;
                it_acd_prop(v_idx).qty_puom         :=  it_acd_prop(v_idx).qty;
                it_acd_prop(v_idx).qty_doc          :=  it_acd_prop(v_idx).qty;
                it_acd_prop(v_idx).qty_doc_puom     :=  it_acd_prop(v_idx).qty;

            END IF;
        ELSE
            v_idx                       :=  it_acd_cust.COUNT + 1;
            it_acd_cust(v_idx)          :=  v_row_acd;
            it_acd_cust(v_idx).org_code :=  x.org_code;

        END IF;

--        Pkg_App_Tools.P_Log('Q',it_acd_prop(v_idx).item_code||' / '||v_row_acd.item_code||' '||it_acd_prop(v_idx).qty,'');

    END LOOP;
    --
    Pkg_Err.p_rae;

    -- property AC_HEADER
    IF it_acd_prop.COUNT > 0 THEN
        v_row_ach_prop.status           :=  'I';
        v_row_ach_prop.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_prop.org_code         :=  p_org_myself;
        v_row_ach_prop.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_prop.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_prop.doc_type         :=  Pkg_Glb.C_AC_NIR  ;
        v_row_ach_prop.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_prop.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_prop.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_prop.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_prop.currency_code    :=  v_row_rec.currency_code;

        v_row_ach_prop.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_prop.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_NIR  ,
                                            p_num_year      => v_row_ach_prop.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_prop);
        v_row_ach_prop.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_prop.COUNT LOOP
            it_acd_prop(i).ref_ac   :=  v_row_ach_prop.idriga;
            it_acd_prop(i).seq_no   :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_prop);
    END IF;

    -- custody AC_HEADER
    IF it_acd_cust.COUNT > 0 THEN
        v_row_ach_cust.status           :=  'I';
        v_row_ach_cust.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_cust.org_code         :=  p_row_trh.org_code;
        v_row_ach_cust.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_cust.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_cust.doc_type         :=  Pkg_Glb.C_AC_NIR  ;
        v_row_ach_cust.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_cust.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_cust.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_cust.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_cust.currency_code    :=  v_row_rec.currency_code;

        v_row_ach_cust.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_cust.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_NIR  ,
                                            p_num_year      => v_row_ach_cust.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_cust);
        v_row_ach_cust.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_cust.COUNT LOOP
            it_acd_cust(i).ref_ac   :=  v_row_ach_cust.idriga;
            it_acd_cust(i).seq_no   :=  i;

        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_cust);
    END IF;

    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        Pkg_Err.p_rae(Pkg_Err.f_err_msg( SQLCODE, SQLERRM));
END;



/**********************************************************************************************
    DDL:    01/10/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_generate_NIR_N    (   p_row_trh   WHS_TRN%ROWTYPE, p_org_myself VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE :   "negative NIR" or "red NIR"
--              when raw material is sent ack to a supplier, the logistic shipment is
--              generating a "NIR" for  accounting, with negative values
----------------------------------------------------------------------------------------------
IS

    CURSOR C_TRN_DETAIL     (p_ref_trn   NUMBER)
                            IS
                            SELECT      d.idriga,
                                        d.org_code, d.item_code, d.trn_sign,d.qty,
                                        d.reason_code, d.whs_code, d.colour_code, d.size_code, d.season_code,
                                        d.group_code, d.order_code, d.puom, d.oper_code_item,
                                        r.property          r_property,
                                        r.accounting        r_accounting,
                                        m.org_code_dst      ,
                                        m.item_code_dst     ,
                                        m.puom              m_puom,
--                                        m.puom_dst              m_puom_dst,
                                        i.puom              id_puom,
                                        w.category_code     w_category_code,
                                        s.org_client        s_org_client
                            ----------------------------------------------------------------------
                            FROM        WHS_TRN_DETAIL  d
                            INNER JOIN  WHS_TRN         h   ON  h.idriga        =   d.ref_trn
                            INNER JOIN  WHS_TRN_REASON  r   ON  r.reason_code   =   d.reason_code
                            INNER JOIN  WAREHOUSE       w   ON  w.whs_code      =   d.whs_code
                            LEFT  JOIN  ITEM_MAPPING    m   ON  m.org_code_src  =   d.org_code
                                                            AND m.item_code_src =   d.item_code
                                                            AND m.org_code_dst  =   Pkg_Glb.C_MYSELF
                            LEFT JOIN   ITEM            i   ON  i.org_code      =   m.org_code_dst
                                                            AND i.item_code     =   m.item_code_dst
                            LEFT JOIN   SHIPMENT_HEADER s   ON  s.idriga        =   h.ref_shipment
                            ----------------------------------------------------------------------
                            WHERE       d.ref_trn       =   p_ref_trn
                                    AND r.accounting    =   'Y'
                            ;

    CURSOR C_GET_PRICE      (p_org_code VARCHAR2, p_item_code VARCHAR2, p_supplier_code VARCHAR2)
                            IS
                            SELECT      rd.price_doc_puom, rh.suppl_code,
                                        DECODE(rh.suppl_code,p_supplier_code,1,0) suppl_equal
                            FROM        RECEIPT_DETAIL  rd
                            INNER JOIN  RECEIPT_HEADER  rh  ON  rh.idriga   =   rd.ref_receipt
                            WHERE       rd.org_code     =   p_org_code
                                AND     rd.item_code    =   p_item_code
                            ORDER BY    suppl_equal DESC
                            ;

    it_acd_prop             Pkg_Rtype.ta_ac_detail;
    it_acd_cust             Pkg_Rtype.ta_ac_detail;

    v_row_ach_prop          AC_HEADER%ROWTYPE;
    v_row_ach_cust          AC_HEADER%ROWTYPE;
    v_row_acd               AC_DETAIL%ROWTYPE;
    v_idx                   PLS_INTEGER;
    v_conversion            NUMBER;
    v_error                 VARCHAR2(500);
    v_row_price             C_GET_PRICE%ROWTYPE;

    C_DOC_TYPE              VARCHAR2(32000)     :=  'AC';

BEGIN

    -- cycle on transaction's details
    FOR x IN C_TRN_DETAIL(p_row_trh.idriga)
    LOOP
        v_row_price.price_doc_puom := 0;
        OPEN    C_GET_PRICE(x.org_code, x.item_code, x.s_org_client);
        FETCH   C_GET_PRICE INTO v_row_price;
        CLOSE   C_GET_PRICE;

        v_row_acd.ref_trn_detail    :=  x.idriga;
        v_row_acd.item_code         :=  x.item_code;
        v_row_acd.oper_code_item    :=  x.oper_code_item;
        v_row_acd.size_code         :=  x.size_code;
        v_row_acd.colour_code       :=  x.colour_code;
        v_row_acd.season_code       :=  x.season_code;
        v_row_acd.trn_sign          :=  x.trn_sign;
        v_row_acd.qty               :=  (-1) * x.qty;
        v_row_acd.qty_puom          :=  (-1) * x.qty;
        v_row_acd.qty_doc           :=  (-1) * x.qty;
        v_row_acd.qty_doc_puom      :=  (-1) * x.qty;
        v_row_acd.unit_price        :=  v_row_price.price_doc_puom;
        v_row_acd.unit_price_puom   :=  v_row_price.price_doc_puom;
        v_row_acd.uom               :=  NVL(x.id_puom, x.puom);
        v_row_acd.puom              :=  NVL(x.id_puom, x.puom);
        v_row_acd.whs_code          :=  x.whs_code;
        v_row_acd.group_code        :=  '';
        v_row_acd.order_code        :=  '';


        IF      x.r_property = 'Y'
            OR
                (NVL(x.r_property,'-') = '-' AND x.w_category_code = 'MPP') THEN
            v_idx                       :=  it_acd_prop.COUNT + 1;
            it_acd_prop(v_idx)          :=  v_row_acd;
            it_acd_prop(v_idx).org_code :=  p_org_myself;

            -- for org_code that is different from C_MYSELF must be a mapping in
            -- item_mapping for the managment on organization C_MYSELF
            IF      x.org_code   <> p_org_myself THEN
                IF x.org_code_dst  IS NULL THEN
                    Pkg_Err.p_err(  x.org_code ||'-'||x.item_code,
                                    'Nu exista cod corespunzator in gestiunea '||p_org_myself);
                END IF;
                it_acd_prop(v_idx).item_code        :=  x.item_code_dst;
                it_acd_prop(v_idx).uom              :=  x.id_puom;
                it_acd_prop(v_idx).puom             :=  x.id_puom;
                v_error     :=  f_uom_myself(x.puom, x.id_puom, v_conversion);
                IF v_error IS NOT NULL THEN Pkg_Err.p_rae(v_error); END IF;
                it_acd_prop(v_idx).qty              :=  it_acd_prop(v_idx).qty * v_conversion;
                it_acd_prop(v_idx).qty_puom         :=  it_acd_prop(v_idx).qty;
                it_acd_prop(v_idx).qty_doc          :=  it_acd_prop(v_idx).qty;
                it_acd_prop(v_idx).qty_doc_puom     :=  it_acd_prop(v_idx).qty;

            END IF;
        ELSE
            v_idx                       :=  it_acd_cust.COUNT + 1;
            it_acd_cust(v_idx)          :=  v_row_acd;
            it_acd_cust(v_idx).org_code :=  x.org_code;

        END IF;

--        Pkg_App_Tools.P_Log('Q',it_acd_prop(v_idx).item_code||' / '||v_row_acd.item_code||' '||it_acd_prop(v_idx).qty,'');

    END LOOP;
    --
    Pkg_Err.p_rae;

    -- property AC_HEADER
    IF it_acd_prop.COUNT > 0 THEN
        v_row_ach_prop.status           :=  'I';
        v_row_ach_prop.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_prop.org_code         :=  p_org_myself;
        v_row_ach_prop.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_prop.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_prop.doc_type         :=  Pkg_Glb.C_AC_NIR  ;
        v_row_ach_prop.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_prop.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_prop.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_prop.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_prop.currency_code    :=  '';--v_row_rec.currency_code;

        v_row_ach_prop.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_prop.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_NIR  ,
                                            p_num_year      => v_row_ach_prop.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_prop);
        v_row_ach_prop.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_prop.COUNT LOOP
            it_acd_prop(i).ref_ac   :=  v_row_ach_prop.idriga;
            it_acd_prop(i).seq_no   :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_prop);
    END IF;

    -- custody AC_HEADER
    IF it_acd_cust.COUNT > 0 THEN
        v_row_ach_cust.status           :=  'I';
        v_row_ach_cust.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_cust.org_code         :=  p_row_trh.org_code;
        v_row_ach_cust.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_cust.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_cust.doc_type         :=  Pkg_Glb.C_AC_NIR  ;
        v_row_ach_cust.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_cust.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_cust.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_cust.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_cust.currency_code    :=  '';--v_row_rec.currency_code;

        v_row_ach_cust.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_cust.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_NIR  ,
                                            p_num_year      => v_row_ach_cust.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_cust);
        v_row_ach_cust.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_cust.COUNT LOOP
            it_acd_cust(i).ref_ac   :=  v_row_ach_cust.idriga;
            it_acd_cust(i).seq_no   :=  i;

        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_cust);
    END IF;

    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        Pkg_Err.p_rae(Pkg_Err.f_err_msg( SQLCODE, SQLERRM));
END;


/**********************************************************************************************
    DDL:    07/12/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_generate_TRN    (   p_row_trh   WHS_TRN%ROWTYPE, p_org_myself VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE :   prepaires data in VW_PREP_LOG_VS_AC with all the warehouse transactions
--              for a month and the accounting documents generated by them
----------------------------------------------------------------------------------------------
IS

    CURSOR C_TRN_DETAIL     (p_ref_trn   NUMBER)
                            IS
                            SELECT      d.idriga,
                                        d.org_code, d.item_code, d.trn_sign,d.qty,
                                        d.reason_code, d.whs_code, d.colour_code, d.size_code, d.season_code,
                                        d.group_code, d.order_code, d.puom, d.oper_code_item,
                                        r.property          r_property,
                                        r.accounting        r_accounting,
                                        m.org_code_dst      ,
                                        m.item_code_dst
                            ----------------------------------------------------------------------
                            FROM        WHS_TRN_DETAIL  d
                            INNER JOIN  WHS_TRN_REASON  r   ON  r.reason_code   =   d.reason_code
                            LEFT JOIN   ITEM_MAPPING    m   ON  m.org_code_src  =   d.org_code
                                                            AND m.item_code_src =   d.item_code
                                                            AND m.org_code_dst  =   p_org_myself
                            ----------------------------------------------------------------------
                            WHERE       d.ref_trn       =   p_ref_trn
                                AND     r.accounting    =   'Y'
                            ;

    it_acd_prop             Pkg_Rtype.ta_ac_detail;
    it_acd_cust             Pkg_Rtype.ta_ac_detail;

    v_row_ach_prop          AC_HEADER%ROWTYPE;
    v_row_ach_cust          AC_HEADER%ROWTYPE;
    v_row_acd               AC_DETAIL%ROWTYPE;
    v_idx                   PLS_INTEGER;

    C_DOC_TYPE              VARCHAR2(32000) :=  'AC';

BEGIN

    -- cycle on transaction's details
    FOR x IN C_TRN_DETAIL(p_row_trh.idriga)
    LOOP

        v_row_acd.ref_trn_detail    :=  x.idriga;
        v_row_acd.item_code         :=  x.item_code;
        v_row_acd.oper_code_item    :=  x.oper_code_item;
        v_row_acd.size_code         :=  x.size_code;
        v_row_acd.colour_code       :=  x.colour_code;
        v_row_acd.season_code       :=  x.season_code;
        v_row_acd.trn_sign          :=  x.trn_sign;
        v_row_acd.qty               :=  x.qty;
        v_row_acd.qty_puom          :=  x.qty;
        v_row_acd.qty_doc           :=  x.qty;
        v_row_acd.qty_doc_puom      :=  x.qty;
        v_row_acd.unit_price        :=  0;
        v_row_acd.unit_price_puom   :=  0;

        v_row_acd.uom               :=  x.puom;
        v_row_acd.puom              :=  x.puom;
        v_row_acd.whs_code          :=  x.whs_code;
        v_row_acd.group_code        :=  x.group_code;
        v_row_acd.order_code        :=  x.order_code;

        IF x.r_property = 'Y' THEN
            v_idx                       :=  it_acd_prop.COUNT + 1;
            it_acd_prop(v_idx)          :=  v_row_acd;
            it_acd_prop(v_idx).org_code :=  p_org_myself;  -- change the organization to myselef

            -- for org_code that is different from C_MYSELF must be a mapping in
            -- item_mapping for the managment on organization C_MYSELF
            IF      x.org_code   <> p_org_myself THEN
                IF x.org_code_dst  IS NULL THEN
                    Pkg_Err.p_err(  x.org_code ||'-'||x.item_code,
                                    'Nu exista cod corespunzator in gestiunea '||p_org_myself);
                END IF;
                it_acd_prop(v_idx).item_code :=  x.item_code_dst;
            END IF;
        ELSE
            v_idx                       :=  it_acd_cust.COUNT + 1;
            it_acd_cust(v_idx)          :=  v_row_acd;
            it_acd_cust(v_idx).org_code :=  x.org_code;
        END IF;
    END LOOP;
    --
    Pkg_Err.p_rae();

    -- property AC_HEADER
    IF it_acd_prop.COUNT > 0 THEN
        v_row_ach_prop.status           :=  'I';
        v_row_ach_prop.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_prop.org_code         :=  p_org_myself;
        v_row_ach_prop.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_prop.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_prop.doc_type         :=  Pkg_Glb.C_AC_TRN;
        v_row_ach_prop.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_prop.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_prop.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_prop.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_prop.currency_code    :=  Pkg_Glb.C_MY_CURRENCY  ;

        v_row_ach_prop.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_prop.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_TRN,
                                            p_num_year      => v_row_ach_prop.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_prop);
        v_row_ach_prop.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_prop.COUNT LOOP
            it_acd_prop(i).ref_ac       :=  v_row_ach_prop.idriga;
            it_acd_prop(i).seq_no       :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_prop);
    END IF;

    -- custody AC_HEADER
    IF it_acd_cust.COUNT > 0 THEN
        v_row_ach_cust.status           :=  'I';
        v_row_ach_cust.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_cust.org_code         :=  p_row_trh.org_code;
        v_row_ach_cust.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_cust.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_cust.doc_type         :=  Pkg_Glb.C_AC_TRN ;
        v_row_ach_cust.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_cust.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_cust.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_cust.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_cust.currency_code    :=  Pkg_Glb.C_MY_CURRENCY ;

        v_row_ach_cust.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_cust.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_TRN,
                                            p_num_year      => v_row_ach_cust.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_cust);
        v_row_ach_cust.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_cust.COUNT LOOP
            it_acd_cust(i).ref_ac       :=  v_row_ach_cust.idriga;
            it_acd_cust(i).seq_no       :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_cust);
    END IF;

    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        Pkg_Lib.p_rae(Pkg_Err.f_err_msg( SQLCODE, SQLERRM));
END;



/****************************************************************************************************
    DDL:    26/05/2008  d   Create
/****************************************************************************************************/
FUNCTION f_sql_frm_ac_analysis          (   p_ref_trn       NUMBER,
                                            p_year_month    VARCHAR2)
                                            RETURN          typ_frm     pipelined
--------------------------------------------------------------------------------------------
--  PURPOSE:    SQL function for AC_HEADER
--------------------------------------------------------------------------------------------
IS

    CURSOR C_LINES  IS
                    SELECT
                            date_legal, org_code, ref_trn, trn_year, trn_code,
                            trn_date, trn_type, flag_storno, log_doc_info,
                            ac_org_code,
                            ac_date_legal, ac_doc_code, ac_doc_year, ac_doc_type,
                            ac_status, currency_code, report_object
                    FROM    VW_PREP_LOG_VS_AC
                    WHERE   p_ref_trn           IS NULL
                    UNION ALL
                    SELECT
                            date_legal, org_code, ref_trn, trn_year, trn_code,
                            trn_date, trn_type, flag_storno, log_doc_info,
                            ac_org_code,
                            ac_date_legal, ac_doc_code, ac_doc_year, ac_doc_type,
                            ac_status, currency_code, report_object
                    FROM    VW_PREP_LOG_VS_AC
                    WHERE   p_ref_trn           IS NOT NULL
                        AND ref_trn             =   p_ref_trn
                    ----
                    ORDER BY date_legal,trn_type,trn_code
                    ;

    v_row           tmp_frm := tmp_frm();
BEGIN

    Pkg_Ac.p_prep_log_vs_ac(p_year_month);

    FOR X IN C_lines
    LOOP

        v_row.idriga    :=      x.ref_trn;
        v_row.dcn       :=      0;
        v_row.seq_no    :=      C_LINES%rowcount;

        v_row.txt01     :=  x.org_code;
        v_row.txt02     :=  x.trn_year;
        v_row.txt03     :=  x.trn_code;
        v_row.txt04     :=  x.trn_type;
        v_row.txt05     :=  x.flag_storno;
        v_row.txt06     :=  x.log_doc_info;
        v_row.txt07     :=  x.ac_doc_code;
        v_row.txt08     :=  x.ac_doc_year;
        v_row.txt09     :=  x.ac_doc_type;
        v_row.txt10     :=  x.ac_status;
        v_row.txt11     :=  x.currency_code;
        v_row.txt12     :=  x.report_object;
        v_row.txt13     :=  x.ac_org_code;
        v_row.txt14     :=  p_year_month    ;

        v_row.data01    :=  x.date_legal;
        v_row.data02    :=  x.trn_date;
        v_row.data03    :=  x.ac_date_legal;

        v_row.numb01    :=  x.ref_trn;

        pipe ROW(v_row);
    END LOOP;

    RETURN;
END;


/****************************************************************************************************
    DDL:    26/05/2008  d   Create
/****************************************************************************************************/
FUNCTION f_sql_frm_aca_detail           (   p_ref_trn       VARCHAR2)
                                            RETURN          typ_frm     pipelined
--------------------------------------------------------------------------------------------
--  PURPOSE:    SQL function for ACCOUNT ANALYSIS details
--------------------------------------------------------------------------------------------
IS

    CURSOR C_LINES  IS
                    SELECT      td.org_code         td_org_code,
                                td.item_code        td_item_code,
                                ti.description      ti_description,
                                ----
                                td.trn_sign,
                                td.qty,
                                td.puom,
                                td.whs_code,
                                td.oper_code_item,
                                td.colour_code,
                                td.size_code,
                                td.season_code,
                                td.group_code,
                                td.order_code,
                                td.reason_code,
                                ----
                                ad.org_code         ad_org_code,
                                ad.item_code        ad_item_code,
                                ai.description      ai_description,
                                ad.uom              ad_uom,
                                ad.puom             ad_puom,
                                ad.qty              ad_qty
                    ---------------------------------------------------------------------------
                    FROM        WHS_TRN_DETAIL      td
                    INNER JOIN  WHS_TRN_REASON      r   ON  r.reason_code       =   td.reason_code
                    LEFT JOIN   AC_DETAIL           ad  ON  ad.ref_trn_detail   =   td.idriga

                    INNER JOIN  ITEM                ti  ON  ti.org_code         =   td.org_code
                                                        AND ti.item_code        =   td.item_code
                    LEFT JOIN   ITEM                ai  ON  ai.org_code         =   ad.org_code
                                                        AND ai.item_code        =   ad.item_code
                    ---------------------------------------------------------------------------
                    WHERE       td.ref_trn          =   p_ref_trn
           --                 AND r.accounting        =   'Y'
                    ;

    v_row           tmp_frm := tmp_frm();
BEGIN



    FOR X IN C_lines
    LOOP

        v_row.idriga    :=      C_LINES%rowcount;
        v_row.dcn       :=      0;
        v_row.seq_no    :=      C_LINES%rowcount;

        v_row.txt01     :=  x.td_org_code;
        v_row.txt02     :=  x.td_item_code;
        v_row.txt03     :=  x.ti_description;
        v_row.txt04     :=  x.puom;
        v_row.txt05     :=  x.whs_code;
        v_row.txt06     :=  x.oper_code_item;
        v_row.txt07     :=  x.colour_code;
        v_row.txt08     :=  x.size_code;
        v_row.txt09     :=  x.season_code;
        v_row.txt10     :=  x.group_code;
        v_row.txt11     :=  x.order_code;
        v_row.txt12     :=  x.reason_code;
        v_row.txt13     :=  x.ad_org_code;
        v_row.txt14     :=  x.ad_item_code;
        v_row.txt15     :=  x.ai_description;
        v_row.txt16     :=  x.ad_uom;

        v_row.numb01    :=  p_ref_trn;
        v_row.numb02    :=  x.trn_sign;
        v_row.numb03    :=  x.qty;
        v_row.numb04    :=  x.ad_qty;

        pipe ROW(v_row);
    END LOOP;

    RETURN;
END;


/****************************************************************************************************
    DDL:    26/05/2008  d   Create
            20/10/2008  d   added the acoounting analytical code
            22/07/2009  d   modified exchange_rate date from LEGAL_DATE to REC_DOC_DATE
/****************************************************************************************************/
PROCEDURE p_rep_nir     (   p_org_code   VARCHAR2,p_doc_year VARCHAR2,  p_doc_code  VARCHAR2)
--------------------------------------------------------------------------------------------
--  PURPOSE:    prepaire data for accounting NIR report
--------------------------------------------------------------------------------------------
IS

    CURSOR C_LINES      (p_ref_ac   NUMBER)
                        IS
                        SELECT      a.*,
                                    i.description       i_description,
         i.account_analytic  i_account_analytic,
                                    c.description       c_description
                        ------------------------------------------------------
                        FROM        AC_DETAIL   a
                        INNER JOIN  ITEM        i   ON  i.org_code      =   a.org_code
                                                    AND i.item_code     =   a.item_code
                        LEFT JOIN   COLOUR      c   ON  c.org_code      =   a.org_code
                                                    AND c.colour_code   =   a.colour_code
                        ------------------------------------------------------
                        WHERE       ref_ac      =   p_ref_ac
                        ;


    v_row_ach           AC_HEADER%ROWTYPE;
    v_row_rep           VW_REP_NIR%ROWTYPE;
    v_row_org           ORGANIZATION%ROWTYPE;
    v_row_sup           ORGANIZATION%ROWTYPE;
    v_row_xcr           CURRENCY_RATE%ROWTYPE;
    C_CURRENCY_CODE     VARCHAR2(5) :=  'RON';

BEGIN

    DELETE FROM VW_REP_NIR;


    -- get the AC_HEADER row
    v_row_ach.org_code      :=  p_org_code;
    v_row_ach.doc_type      :=  'NIR';
    v_row_ach.doc_year      :=  p_doc_year;
    v_row_ach.doc_code      :=  p_doc_code;
    IF NOT Pkg_Get2.f_get_ac_header_2(v_row_ach) THEN NULL; END IF;

    -- get the ORG info
    v_row_org.org_code      :=  Pkg_Nomenc.f_get_myself_org();
    IF NOT Pkg_Get2.f_get_organization_2(v_row_org) THEN NULL; END IF;

    -- get the supplier info
    v_row_sup.org_code      :=  v_row_ach.ref_org_code;
    IF NOT Pkg_Get2.f_get_organization_2(v_row_sup) THEN NULL; END IF;

    -- get the Exchange Rate
    IF v_row_ach.currency_code <> C_CURRENCY_CODE THEN
        v_row_xcr.calendar_day  :=  v_row_ach.ref_doc_date;
        v_row_xcr.currency_from :=  v_row_ach.currency_code;
        v_row_xcr.currency_to   :=  C_CURRENCY_CODE;
        IF NOT Pkg_Get2.f_get_currency_rate_2(v_row_xcr) THEN
            Pkg_Lib.p_rae('Nu aveti setat un curs valutar pentru data de '||TO_CHAR(v_row_ach.date_legal,'dd/mm/yyyy'));
        END IF;
    ELSE
        v_row_xcr.exchange_rate :=  1;
    END IF;

    -- prepaire the report row with header informations
    v_row_rep.segment_code  :=  'VW_REP_NIR';
    v_row_rep.org_code      :=  v_row_ach.org_code;
    v_row_rep.org_name      :=  v_row_org.org_name || ' Gestiune '||v_row_ach.org_code;
    v_row_rep.doc_code      :=  v_row_ach.doc_code;
    v_row_rep.doc_day       :=  TO_CHAR(v_row_ach.date_legal, 'DD');
    v_row_rep.doc_month     :=  TO_CHAR(v_row_ach.date_legal, 'MM');
    v_row_rep.doc_year      :=  TO_CHAR(v_row_ach.date_legal, 'YYYY');
    v_row_rep.supplier_doc  :=  v_row_ach.ref_doc_code||' / '||
                                v_row_ach.ref_doc_date||'  '||
                                v_row_sup.org_name;
    v_row_rep.currency_code :=  C_CURRENCY_CODE;
    v_row_rep.exchange_rate :=  v_row_xcr.exchange_rate;

    v_row_rep.declaration   :=  'Subsemnatii, membrii comisiei de receptie am procedat la '||
                                'receptionarea valorilor materiale furnizate de: '||v_row_sup.org_name||
                                ' din '||v_row_sup.country_code||', '||v_row_sup.city||', '||v_row_sup.address||
                                ' cu vagonul AUTO nr. ________________ ' ||
                                ' doc. insotitoare: '|| '_________________' ||
                                ', delegat: '|| '_______________________'||
                                ' constatandu-se urmatoarele:';


    FOR x IN C_LINES(v_row_ach.idriga)
    LOOP
        v_row_rep.seq_no                :=  C_LINES%rowcount;
        v_row_rep.item_description      :=  RPAD    (x.item_code,20,' ') ||
                                            RPAD    (SUBSTR  (x.i_description,1,29),30,' ')||
                                            RPAD    (x.season_code, 6,' ')||
                                            RPAD    (x.size_code,   4,' ')||
                                            x.c_description;
        v_row_rep.uom                   :=  x.uom;
        v_row_rep.qty                   :=  x.qty_doc;
        v_row_rep.qty_receipt           :=  x.qty;
        v_row_rep.unit_price            :=  x.unit_price * NVL(v_row_xcr.exchange_rate, 1);
        v_row_rep.line_value            :=  ROUND(x.qty * v_row_rep.unit_price, 2);
        v_row_rep.account_code          :=  x.account_code;
        v_row_rep.account_analytic      :=  x.i_account_analytic;

        INSERT INTO VW_REP_NIR VALUES v_row_rep;

    END LOOP;

    -- set the status to P
    v_row_ach.status    :=  'P';
    Pkg_Iud.p_ac_header_iud('U', v_row_ach);

    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        Pkg_Lib.p_rae(Pkg_Err.f_err_msg( SQLCODE, SQLERRM));
END;


/****************************************************************************************************
    DDL:    02/06/2008  d   Create
            20/10/2008  d   added the accounting analytical code
            22/07/2009  d   modified data grouping => without size
/****************************************************************************************************/
PROCEDURE p_rep_bc     (    p_org_code      VARCHAR2,
                            p_doc_year      VARCHAR2,
                            p_doc_code      VARCHAR2,
                            p_doc_type      VARCHAR2)
--------------------------------------------------------------------------------------------
--  PURPOSE:    prepaire data for accounting BC report
--------------------------------------------------------------------------------------------
IS

    CURSOR C_LINES      (p_ref_ac   NUMBER)
                        IS
                        SELECT      a.item_code, a.season_code, a.colour_code,
                                    a.group_code, a.order_code,
                                    a.account_code,
                                    '*'                     size_code,
                                    sum(a.qty)              qty,
                                    sum(a.qty*a.unit_price)/sum(a.qty)
                                                            unit_price,
                                    max(a.uom)              uom,
                                    max(i.description)      i_description,
                                    max(i.account_analytic) i_account_analytic,
                                    max(c.description)      c_description
                        ------------------------------------------------------
                        FROM        AC_DETAIL   a
                        LEFT  JOIN  ITEM        i   ON  i.org_code      =   a.org_code
                                                    AND i.item_code     =   a.item_code
                        LEFT JOIN   COLOUR      c   ON  c.org_code      =   a.org_code
                                                    AND c.colour_code   =   a.colour_code
                        ------------------------------------------------------
                        WHERE       ref_ac      =   p_ref_ac
                        GROUP BY    a.item_code, a.season_code, a.colour_code, a.group_code,
                                    a.order_code, a.account_code
                        ORDER BY    a.account_code, i_account_analytic,
                                    a.item_code, size_code, a.colour_code
                        ;

    CURSOR C_WHS        (p_ref_ac   NUMBER)
                        IS
                        SELECT      d.whs_code, d.trn_sign, MAX(w.description) description
                        FROM        AC_DETAIL   d
                        INNER JOIN  WAREHOUSE   w   ON  d.whs_code  =   w.whs_code
                        WHERE       d.ref_ac      =   p_ref_ac
                        GROUP BY    d.whs_code, d.trn_sign
                        ;


    v_row_ach           AC_HEADER%ROWTYPE;
    v_row_rep           VW_REP_BC%ROWTYPE;
    v_row_org           ORGANIZATION%ROWTYPE;
    v_row_sup           ORGANIZATION%ROWTYPE;
    v_row_xcr           CURRENCY_RATE%ROWTYPE;
    v_whs_in            VARCHAR2(200);
    v_whs_out           VARCHAR2(200);
    C_CURRENCY_CODE     VARCHAR2(5) :=  'RON';

BEGIN

    DELETE FROM VW_REP_BC;

    -- get the AC_HEADER row
    v_row_ach.org_code      :=  p_org_code;
    v_row_ach.doc_type      :=  p_doc_type;
    v_row_ach.doc_year      :=  p_doc_year;
    v_row_ach.doc_code      :=  p_doc_code;
    IF NOT Pkg_Get2.f_get_ac_header_2(v_row_ach) THEN NULL; END IF;

    -- get the ORG info
    v_row_org.org_code      :=  Pkg_Nomenc.f_get_myself_org();
    IF NOT Pkg_Get2.f_get_organization_2(v_row_org) THEN NULL; END IF;

    -- get the IN and OUT warehouses
    FOR x IN C_WHS (v_row_ach.idriga)
    LOOP
        IF x.trn_sign = -1 THEN
            v_whs_out   := v_whs_out||x.description||' ';
        ELSE
            v_whs_in    := v_whs_in ||x.description||' ';
        END IF;
    END LOOP;

    -- prepaire the report row with header informations
    v_row_rep.segment_code      :=  'VW_REP_BC';
    v_row_rep.org_code          :=  v_row_ach.org_code;
    v_row_rep.org_name          :=  v_row_org.org_name || ' Gestiune '||v_row_ach.org_code;
    v_row_rep.doc_code          :=  v_row_ach.doc_code;
    v_row_rep.doc_date          :=  TO_CHAR(v_row_ach.date_legal, 'DD/mm/yyyy');
    v_row_rep.doc_day           :=  TO_CHAR(v_row_ach.date_legal, 'DD');
    v_row_rep.doc_month         :=  TO_CHAR(v_row_ach.date_legal, 'MM');
    v_row_rep.doc_year          :=  TO_CHAR(v_row_ach.date_legal, 'YYYY');
    v_row_rep.currency_code     :=  C_CURRENCY_CODE;
    v_row_rep.group_code_f      :=  NULL;
    v_row_rep.empl_issuer       :=  NULL;
    v_row_rep.empl_receiver     :=  NULL;
    v_row_rep.empl_responsable  :=  NULL;
    v_row_rep.empl_dept_chief   :=  NULL;
    v_row_rep.whs_issue         :=  v_whs_out;
    v_row_rep.whs_receive       :=  v_whs_in;

    FOR x IN C_LINES(v_row_ach.idriga)
    LOOP
        v_row_rep.seq_no                :=  C_LINES%rowcount;
        v_row_rep.item_code             :=  x.item_code;
        v_row_rep.item_description      :=  RPAD    (SUBSTR  (x.i_description,1,29),30,' ')||
                                            RPAD    (x.season_code, 6,' ')||
                                            RPAD    (x.size_code,   4,' ')||
                                            x.c_description;
        v_row_rep.puom                  :=  x.uom;
        v_row_rep.qty                   :=  x.qty;
        v_row_rep.qty_demand            :=  x.qty;
        if x.unit_price = 0 then
            v_row_rep.unit_price            :=  null;
        else
            v_row_rep.unit_price            :=  x.unit_price;
        end if;
        v_row_rep.line_value            :=  ROUND(x.qty * v_row_rep.unit_price, 2);
        v_row_rep.group_code            :=  NVL(x.group_code, x.order_code);
        v_row_rep.account_code          :=  x.account_code;
        v_row_rep.account_analytic      :=  x.i_account_analytic;

        INSERT INTO VW_REP_BC VALUES v_row_rep;

    END LOOP;

    -- set the status to P
    v_row_ach.status    :=  'P';
    Pkg_Iud.p_ac_header_iud('U', v_row_ach);

    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        Pkg_Lib.p_rae(Pkg_Err.f_err_msg( SQLCODE, SQLERRM));
END;


/****************************************************************************************************
    DDL:    29/05/2008  d   Create
/****************************************************************************************************/
PROCEDURE p_get_ac_header   (   p_row_ach       IN OUT  AC_HEADER%ROWTYPE,
                                p_found         IN OUT  BOOLEAN
                            )
-----------------------------------------------------------------------------------------------------
--  PURPOSE:    get the AC_HEADER row corresponding to a ref_trn value
--  PREREQ:     in p_row_ach must be set the ref_trn column
-----------------------------------------------------------------------------------------------------
IS

    CURSOR C_GET_ACH    (   p_ref_trn   NUMBER)
                        IS
                        SELECT      *
                        FROM        AC_HEADER   h
                        WHERE       h.ref_trn   =   p_ref_trn
                        ;

BEGIN
    OPEN    C_GET_ACH   (p_row_ach.ref_trn);
    FETCH   C_GET_ACH   INTO p_row_ach;
    p_found :=  C_GET_ACH%FOUND;
    CLOSE   C_GET_ACH;
END;



/**********************************************************************************************
    DDL:    02/06/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_generate_BC    (    p_row_trh       WHS_TRN%ROWTYPE,
                                p_org_myself    VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE :   generates accounting data for a CONSUMPTION logistic document
----------------------------------------------------------------------------------------------
IS

    CURSOR C_TRN_DETAIL     (p_ref_trn   NUMBER)
                            IS
                            SELECT      d.idriga,
                                        d.org_code, d.item_code, d.trn_sign,d.qty,
                                        d.reason_code, d.whs_code, d.colour_code, d.size_code, d.season_code,
                                        d.group_code, d.order_code, d.puom, d.oper_code_item,
                                        r.property              r_property,
                                        r.accounting            r_accounting,
                                        m.org_code_dst,
                                        m.item_code_dst,
                                        m.puom                  m_puom,
--                                        m.puom_dst              m_puom_dst,
                                        i.puom                  i_puom
                            ----------------------------------------------------------------------
                            FROM        WHS_TRN_DETAIL  d
                            INNER JOIN  WHS_TRN_REASON  r   ON  r.reason_code   =   d.reason_code
                            LEFT JOIN   ITEM_MAPPING    m   ON  m.org_code_src  =   d.org_code
                                                            AND m.item_code_src =   d.item_code
                                                            AND m.org_code_dst  =   p_org_myself
                            LEFT JOIN   ITEM            i   ON  i.org_code      =   m.org_code_dst
                                                            AND i.item_code     =   m.item_code_dst
                            ----------------------------------------------------------------------
                            WHERE       d.ref_trn       =   p_ref_trn
                                AND     r.accounting    =   'Y'
                            ;

    it_acd_prop             Pkg_Rtype.ta_ac_detail;
    it_acd_cust             Pkg_Rtype.ta_ac_detail;

    v_row_ach_prop          AC_HEADER%ROWTYPE;
    v_row_ach_cust          AC_HEADER%ROWTYPE;
    v_row_acd               AC_DETAIL%ROWTYPE;
    v_idx                   PLS_INTEGER;
    v_conversion            NUMBER;
    v_error                 VARCHAR2(500);

    C_DOC_TYPE              VARCHAR2(32000) :=  'AC';

BEGIN

    -- cycle on transaction's details
    FOR x IN C_TRN_DETAIL(p_row_trh.idriga)
    LOOP

        v_row_acd.ref_trn_detail    :=  x.idriga;
        v_row_acd.item_code         :=  x.item_code;
        v_row_acd.oper_code_item    :=  x.oper_code_item;
        v_row_acd.size_code         :=  x.size_code;
        v_row_acd.colour_code       :=  x.colour_code;
        v_row_acd.season_code       :=  x.season_code;
        v_row_acd.trn_sign          :=  x.trn_sign;
        v_row_acd.qty               :=  x.qty;
        v_row_acd.qty_puom          :=  x.qty;
        v_row_acd.qty_doc           :=  x.qty;
        v_row_acd.qty_doc_puom      :=  x.qty;
        v_row_acd.unit_price        :=  0;
        v_row_acd.unit_price_puom   :=  0;
        v_row_acd.whs_code          :=  x.whs_code;
        v_row_acd.group_code        :=  x.group_code;
        v_row_acd.order_code        :=  x.order_code;
        v_row_acd.uom               :=  x.puom;
        v_row_acd.puom              :=  x.puom;


        IF x.r_property = 'Y' THEN
            v_idx                       :=  it_acd_prop.COUNT + 1;
            it_acd_prop(v_idx)          :=  v_row_acd;
            it_acd_prop(v_idx).org_code :=  p_org_myself;  -- change the organization to myselef

            -- for org_code that is different from C_MYSELF must be a mapping in
            -- item_mapping for the managment on organization C_MYSELF
            IF      x.org_code   <> p_org_myself THEN
                IF x.org_code_dst  IS NULL THEN
                    Pkg_Err.p_err(  x.org_code ||'-'||x.item_code,
                                    'Nu exista cod corespunzator in gestiunea '||p_org_myself);
                END IF;
                it_acd_prop(v_idx).item_code    :=  x.item_code_dst;
                it_acd_prop(v_idx).uom          :=  x.i_puom;
                it_acd_prop(v_idx).puom         :=  x.i_puom;
                v_error     :=  f_uom_myself(x.puom, x.i_puom, v_conversion);
                IF v_error IS NOT NULL THEN Pkg_Err.p_rae(v_error); END IF;
                it_acd_prop(v_idx).qty              :=  it_acd_prop(v_idx).qty * v_conversion;
                it_acd_prop(v_idx).qty_puom         :=  it_acd_prop(v_idx).qty;
                it_acd_prop(v_idx).qty_doc          :=  it_acd_prop(v_idx).qty;
                it_acd_prop(v_idx).qty_doc_puom     :=  it_acd_prop(v_idx).qty;

            END IF;
        ELSE
            v_idx                       :=  it_acd_cust.COUNT + 1;
            it_acd_cust(v_idx)          :=  v_row_acd;
            it_acd_cust(v_idx).org_code :=  x.org_code;
        END IF;
    END LOOP;
    --
    Pkg_Err.p_rae;
    --
    -- property AC_HEADER
    IF it_acd_prop.COUNT > 0 THEN
        v_row_ach_prop.status           :=  'I';
        v_row_ach_prop.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_prop.org_code         :=  p_org_myself;
        v_row_ach_prop.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_prop.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_prop.doc_type         :=  Pkg_Glb.C_AC_BC;
        v_row_ach_prop.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_prop.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_prop.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_prop.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_prop.currency_code    :=  Pkg_Glb.C_MY_CURRENCY  ;

        v_row_ach_prop.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_prop.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_BC,
                                            p_num_year      => v_row_ach_prop.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_prop);
        v_row_ach_prop.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_prop.COUNT LOOP
            it_acd_prop(i).ref_ac       :=  v_row_ach_prop.idriga;
            it_acd_prop(i).seq_no       :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_prop);
    END IF;

    -- custody AC_HEADER
    IF it_acd_cust.COUNT > 0 THEN
        v_row_ach_cust.status           :=  'I';
        v_row_ach_cust.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_cust.org_code         :=  p_row_trh.org_code;
        v_row_ach_cust.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_cust.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_cust.doc_type         :=  Pkg_Glb.C_AC_BC ;
        v_row_ach_cust.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_cust.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_cust.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_cust.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_cust.currency_code    :=  Pkg_Glb.C_MY_CURRENCY ;

        v_row_ach_cust.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_cust.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_BC,
                                            p_num_year      => v_row_ach_cust.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_cust);
        v_row_ach_cust.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_cust.COUNT LOOP
            it_acd_cust(i).ref_ac       :=  v_row_ach_cust.idriga;
            it_acd_cust(i).seq_no       :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_cust);
    END IF;


    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        Pkg_Err.p_rae(Pkg_Err.f_err_msg( SQLCODE, SQLERRM));
END;

/**********************************************************************************************
    DDL:    14/06/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_generate_RET    (   p_row_trh       WHS_TRN%ROWTYPE,
                                p_org_myself    VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE :   generates accounting data for a CONSUMPTION logistic document
----------------------------------------------------------------------------------------------
IS

    CURSOR C_TRN_DETAIL     (p_ref_trn   NUMBER)
                            IS
                            SELECT      d.idriga,
                                        d.org_code, d.item_code, d.trn_sign,d.qty,
                                        d.reason_code, d.whs_code, d.colour_code, d.size_code, d.season_code,
                                        d.group_code, d.order_code, d.puom, d.oper_code_item,
                                        r.property          r_property,
                                        r.accounting        r_accounting,
                                        m.org_code_dst      ,
                                        m.item_code_dst
                            ----------------------------------------------------------------------
                            FROM        WHS_TRN_DETAIL  d
                            INNER JOIN  WHS_TRN_REASON  r   ON  r.reason_code   =   d.reason_code
                            LEFT JOIN   ITEM_MAPPING    m   ON  m.org_code_src  =   d.org_code
                                                            AND m.item_code_src =   d.item_code
                                                            AND m.org_code_dst  =   p_org_myself
                            ----------------------------------------------------------------------
                            WHERE       d.ref_trn       =   p_ref_trn
                                AND     r.accounting    =   'Y'
                            ;

    it_acd_prop             Pkg_Rtype.ta_ac_detail;
    it_acd_cust             Pkg_Rtype.ta_ac_detail;

    v_row_ach_prop          AC_HEADER%ROWTYPE;
    v_row_ach_cust          AC_HEADER%ROWTYPE;
    v_row_acd               AC_DETAIL%ROWTYPE;
    v_idx                   PLS_INTEGER;

    C_DOC_TYPE              VARCHAR2(32000) :=  'AC';

BEGIN

    -- cycle on transaction's details
    FOR x IN C_TRN_DETAIL(p_row_trh.idriga)
    LOOP

        v_row_acd.ref_trn_detail    :=  x.idriga;
        v_row_acd.item_code         :=  x.item_code;
        v_row_acd.oper_code_item    :=  x.oper_code_item;
        v_row_acd.size_code         :=  x.size_code;
        v_row_acd.colour_code       :=  x.colour_code;
        v_row_acd.season_code       :=  x.season_code;
        v_row_acd.trn_sign          :=  x.trn_sign;
        v_row_acd.qty               :=  x.qty;
        v_row_acd.qty_puom          :=  x.qty;
        v_row_acd.qty_doc           :=  x.qty;
        v_row_acd.qty_doc_puom      :=  x.qty;
        v_row_acd.unit_price        :=  0;
        v_row_acd.unit_price_puom   :=  0;
        v_row_acd.uom               :=  x.puom;
        v_row_acd.puom              :=  x.puom;
        v_row_acd.whs_code          :=  x.whs_code;
        v_row_acd.group_code        :=  x.group_code;
        v_row_acd.order_code        :=  x.order_code;

        IF x.r_property = 'Y' THEN
            v_idx                       :=  it_acd_prop.COUNT + 1;
            it_acd_prop(v_idx)          :=  v_row_acd;
            it_acd_prop(v_idx).org_code :=  p_org_myself;  -- change the organization to myselef

            -- for org_code that is different from C_MYSELF must be a mapping in
            -- item_mapping for the managment on organization C_MYSELF
            IF      x.org_code   <> p_org_myself THEN
                IF x.org_code_dst  IS NULL THEN
                    Pkg_Err.p_err(  x.org_code ||'-'||x.item_code,
                                    'Nu exista cod corespunzator in gestiunea '||p_org_myself);
                END IF;
                it_acd_prop(v_idx).item_code :=  x.item_code_dst;
            END IF;
        ELSE
            v_idx                       :=  it_acd_cust.COUNT + 1;
            it_acd_cust(v_idx)          :=  v_row_acd;
            it_acd_cust(v_idx).org_code :=  x.org_code;
        END IF;
    END LOOP;
    --
    Pkg_Err.p_rae();

    -- property AC_HEADER
    IF it_acd_prop.COUNT > 0 THEN
        v_row_ach_prop.status           :=  'I';
        v_row_ach_prop.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_prop.org_code         :=  p_org_myself;
        v_row_ach_prop.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_prop.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_prop.doc_type         :=  Pkg_Glb.C_AC_RET;
        v_row_ach_prop.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_prop.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_prop.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_prop.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_prop.currency_code    :=  Pkg_Glb.C_MY_CURRENCY  ;

        v_row_ach_prop.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_prop.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_RET,
                                            p_num_year      => v_row_ach_prop.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_prop);
        v_row_ach_prop.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_prop.COUNT LOOP
            it_acd_prop(i).ref_ac       :=  v_row_ach_prop.idriga;
            it_acd_prop(i).seq_no       :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_prop);
    END IF;

    -- custody AC_HEADER
    IF it_acd_cust.COUNT > 0 THEN
        v_row_ach_cust.status           :=  'I';
        v_row_ach_cust.ref_trn          :=  p_row_trh.idriga;
        v_row_ach_cust.org_code         :=  p_row_trh.org_code;
        v_row_ach_cust.date_legal       :=  p_row_trh.date_legal;
        v_row_ach_cust.doc_year         :=  p_row_trh.trn_year;
        v_row_ach_cust.doc_type         :=  Pkg_Glb.C_AC_RET ;
        v_row_ach_cust.ref_org_code     :=  p_row_trh.partner_code;
        v_row_ach_cust.ref_doc_code     :=  p_row_trh.doc_code;
        v_row_ach_cust.ref_doc_year     :=  p_row_trh.doc_year;
        v_row_ach_cust.ref_doc_date     :=  p_row_trh.doc_date;
        v_row_ach_cust.currency_code    :=  Pkg_Glb.C_MY_CURRENCY ;

        v_row_ach_cust.doc_code         :=  Pkg_Env.f_get_app_doc_number
                                        (   p_org_code      => v_row_ach_cust.org_code,
                                            p_doc_type      => C_DOC_TYPE,
                                            p_doc_subtype   => Pkg_Glb.C_AC_RET,
                                            p_num_year      => v_row_ach_cust.doc_year);

        -- insert in AC_HEADER
        Pkg_Iud.p_ac_header_iud('I', v_row_ach_cust);
        v_row_ach_cust.idriga           :=  Pkg_Lib.f_read_pk;
        -- insert lines in AC_DETAIL
        FOR i IN 1..it_acd_cust.COUNT LOOP
            it_acd_cust(i).ref_ac       :=  v_row_ach_cust.idriga;
            it_acd_cust(i).seq_no       :=  i;
        END LOOP;
        Pkg_Iud.p_ac_detail_miud('I',it_acd_cust);
    END IF;

    COMMIT;

    EXCEPTION WHEN OTHERS THEN
        ROLLBACK;
        Pkg_Lib.p_rae(Pkg_Err.f_err_msg( SQLCODE, SQLERRM));
END;




/**********************************************************************************************
    DDL:    02/06/2008  d   Create date
            07/12/2008  d   added TRN for transfer notes
/*********************************************************************************************/
PROCEDURE p_ac_engine   (   p_ref_trn   NUMBER, p_force VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE :   general procedure for generating accounting document, starting from a logistic
--              warehouse transaction
--  PARAM:      REF_TRN =   warehouse transaction id
--              FORCE   =   if Y -> regenerate the document, if already exists
----------------------------------------------------------------------------------------------
IS

    CURSOR C_EX_AC          (   p_ref_trn NUMBER)
                            IS
                            SELECT      *
                            FROM        AC_HEADER
                            WHERE       ref_trn     =   p_ref_trn
                            ;

    v_row_trh               WHS_TRN%ROWTYPE;
    v_row_ach               AC_HEADER%ROWTYPE;
    v_org_myself            VARCHAR2(30);
    v_found                 BOOLEAN;

BEGIN

    IF p_force = 'Y' THEN Pkg_Err.p_rae('Optiunea de regenerare a documentelor contabile a fost dezactivata !'); END IF;

    -- get WHS_TRN row
    v_row_trh.idriga        :=  p_ref_trn;
    Pkg_Get.p_get_whs_trn(v_row_trh);

    v_org_myself            :=  Pkg_Nomenc.f_get_myself_org();

    -- get the AC_HEADER row
    OPEN    C_EX_AC (p_ref_trn);
    FETCH   C_EX_AC INTO v_row_ach;
    v_found :=  C_EX_AC%FOUND;
    CLOSE   C_EX_AC;
    IF v_found THEN
        IF NVL(p_force,'N') <> 'Y' THEN
            Pkg_Err.p_err   (   'Exista deja un document contabil',
                                'Nu se mai poate genera Document contabil');
        ELSE
            -- delete the accounting document details
            DELETE
            FROM    AC_DETAIL
            WHERE   ref_ac      =   v_row_ach.idriga
            ;
            -- delete the accounting document header
            Pkg_Iud.p_ac_header_iud('D',v_row_ach);
        END IF;
    END IF;

    -- checks
    IF v_row_trh.flag_storno = 'C' THEN Pkg_Err.p_err   (   'Miscarea este stornata',
                                                            'Nu se mai poate genera Document contabil'); END IF;

    IF v_row_trh.flag_storno = 'S' THEN Pkg_Err.p_err   (   'Miscarea este de stornare',
                                                            'Nu se poate genera Document contabil'); END IF;

    Pkg_Err.p_rae;

    --
    CASE

        -- RECEIPT
        WHEN    v_row_trh.trn_type IN (
                                        Pkg_Glb.C_TRN_REC_CTL ,
                                        Pkg_Glb.C_TRN_REC_CUST,
                                        Pkg_Glb.C_TRN_REC_PATR
                                      )
                THEN    Pkg_Ac.p_generate_nir   (v_row_trh, v_org_myself);

        -- CONSUMPTION
        WHEN    v_row_trh.trn_type IN (
                                        Pkg_Glb.C_TRN_TRN_CNS  ,
                                        Pkg_Glb.C_TRN_SHP_CTL
                                      )
                THEN    Pkg_Ac.p_generate_bc    (v_row_trh, v_org_myself);

        -- RETURN FROM WIP
        WHEN    v_row_trh.trn_type IN (
                                        Pkg_Glb.C_TRN_TRN_RET
                                      )
                THEN    Pkg_Ac.p_generate_ret    (v_row_trh, v_org_myself);

        -- RETURN to supplier
        WHEN    v_row_trh.trn_type IN (
                                        Pkg_Glb.C_TRN_SHP_PROP  ,
                                        Pkg_Glb.C_TRN_SHP_CUST
                                      )
                THEN    Pkg_Ac.p_generate_NIR_N (v_row_trh, v_org_myself);

        -- transfer NOTE
        WHEN    v_row_trh.trn_type IN (
                                        Pkg_Glb.C_TRN_TRN_TRN
                                      )
                THEN    Pkg_Ac.p_generate_TRN   (v_row_trh, v_org_myself);

        -- nothing defined
        ELSE
                Pkg_Err.p_rae('Nu exista regula definita pentru generarea unui document contabil din '||v_row_trh.trn_type);

    END CASE;
END;

/**********************************************************************************************
    DDL:    02/06/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_rep_engine      (   p_org_code      VARCHAR2,
                                p_doc_type      VARCHAR2,
                                p_doc_year      VARCHAR2,
                                p_doc_code      VARCHAR2
                            )
----------------------------------------------------------------------------------------------
--  PURPOSE :   general procedure for generating accounting document, starting from a logistic
--              warehouse transaction
----------------------------------------------------------------------------------------------
IS

    v_row_trh               WHS_TRN%ROWTYPE;

BEGIN

    IF p_doc_code IS NULL OR p_doc_year IS NULL THEN
        Pkg_Lib.p_rae   ('Nu sunteti pozitionati pe un document valid !');
    END IF;

    --
    CASE

        -- RECEIPT
        WHEN    p_doc_type = Pkg_Glb.C_AC_NIR
                THEN    Pkg_Ac.p_rep_nir    (p_org_code,p_doc_year, p_doc_code);

        -- CONSUMPTION
        WHEN    p_doc_type IN (Pkg_Glb.C_AC_BC, Pkg_Glb.C_AC_RET, Pkg_Glb.C_AC_TRN)
                THEN    Pkg_Ac.p_rep_bc     (p_org_code,p_doc_year, p_doc_code, p_doc_type);

        ELSE
                Pkg_Err.p_rae('Nu se poate printa acest tip de document contabil -> '||p_doc_type);

    END CASE;
END;


/**********************************************************************************************
    DDL:    19/09/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_rep_stock_balance       (   p_org_code      VARCHAR2,
                                        p_year_month    VARCHAR2)
-----------------------------------------------------------------------------------------
--  PURPOSE:    generates the accounting report "Balanta materialelor" -
--
--  INPUT       org_code = inventory organization for which to
-----------------------------------------------------------------------------------------
IS
BEGIN
    NULL;
END;

/**********************************************************************************************
    DDL:    19/09/2008  d   Create date
/*********************************************************************************************/
FUNCTION f_sql_frm_cost_type    RETURN typ_frm pipelined
-----------------------------------------------------------------------------------------
--  PURPOSE:    rowsource for COST_TYPE from
-----------------------------------------------------------------------------------------
IS

    CURSOR C_LINES  IS
                    SELECT      *
                    FROM        COST_TYPE
                    ORDER BY    cost_code
                    ;

    v_row           tmp_frm := tmp_frm();

BEGIN

    FOR x IN C_LINES
    LOOP
        v_row.idriga    :=  x.idriga;
        v_row.dcn       :=  x.dcn;
        v_row.seq_no    :=  C_LINES%ROWCOUNT;

        v_row.txt01     :=  x.cost_code;
        v_row.txt02     :=  x.description;
        v_row.txt03     :=  x.flag_period;
        v_row.txt04     :=  x.flag_updatable;
        v_row.txt05     :=  x.cost_category;

        pipe ROW(v_row);
    END LOOP;

    RETURN;
END;

/**********************************************************************************************
    DDL:    25/09/2008  d   Create date
/*********************************************************************************************/
FUNCTION f_sql_frm_ac_period    RETURN typ_frm pipelined
-----------------------------------------------------------------------------------------
--  PURPOSE:    rowsource for COST_TYPE from
-----------------------------------------------------------------------------------------
IS

    CURSOR C_LINES  IS
                    SELECT      *
                    FROM        AC_PERIOD
                    ORDER BY    period_code
                    ;

    v_row           tmp_frm := tmp_frm();

BEGIN

    FOR x IN C_LINES
    LOOP
        v_row.idriga    :=  x.idriga;
        v_row.dcn       :=  x.dcn;
        v_row.seq_no    :=  C_LINES%ROWCOUNT;

        v_row.txt01     :=  x.period_code;
        v_row.txt02     :=  x.description;
        v_row.txt03     :=  x.period_type;
        v_row.txt04     :=  x.status;
        v_row.data01    :=  x.start_date;
        v_row.data02    :=  x.end_date;

        pipe ROW(v_row);
    END LOOP;

    RETURN;
END;

/**********************************************************************************************
    DDL:    26/09/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_generate_pmp    (   p_yearmonth     VARCHAR2,
                                p_org_code      VARCHAR2,
                                p_whs_code      VARCHAR2,
                                p_item_type     VARCHAR2,
                                p_season_code   VARCHAR2,
                                p_only_rep      VARCHAR2,
                                p_commit        VARCHAR2
                            )
-----------------------------------------------------------------------------------------------
--  PURPOSE:    computes the PMP for a specific month
-----------------------------------------------------------------------------------------------
IS

    CURSOR  C_LINES (   p_org_code          VARCHAR2,
                        p_whs_code          VARCHAR2,
                        p_start_date        DATE,
                        p_end_date          DATE,
                        p_prev_period_code  VARCHAR2
                    )
            IS
            SELECT  a.org_code,a.item_code,a.oper_code_item,
                    a.size_code, a.colour_code, a.season_code,a.puom,
                    SUM(a.stock_ini)        stock_ini,
                    SUM(a.value_ini)        value_ini,
                    SUM(a.qty_in)           qty_in,
                    SUM(a.qty_in_x)         qty_in_x,
                    SUM(a.value_in)         value_in,
                    SUM(a.qty_out)          qty_out,
                    (CASE
                    WHEN SUM(a.stock_ini+a.qty_in) <> 0 THEN
                            SUM(a.value_ini+a.value_in) / SUM(a.stock_ini+a.qty_in)
                    ELSE    0
                    END)
                                            cmp,
                    MAX(i.description)      i_description
            FROM
                (
                SELECT      s.org_code,s.item_code,s.oper_code_item,s.size_code, s.colour_code, s.season_code,s.puom,
                            s.qty               stock_ini,
                            s.qty*c.unit_cost   value_ini,
                            0       qty_in,
                            0       value_in,
                            0       qty_in_x,
                            0       qty_out
                FROM        VW_STOC_ONLINE  s
                LEFT JOIN   ITEM_COST       c   ON  c.org_code              =   s.org_code
                                                AND c.item_code             =   s.item_code
                                                AND NVL(c.oper_code_item,'-')
                                                                            =   NVL(s.oper_code_item,'-')
                                                AND NVL(c.size_code,'-')    =   NVL(s.size_code,'-')
                                                AND NVL(c.colour_code,'-')  =   NVL(s.colour_code,'-')
                                                AND c.season_code           =   s.season_code
                                                AND c.cost_code             =   'CMP'
                                                AND c.period_code           =   p_prev_period_code
                --
                UNION ALL
                --
                SELECT      d.org_code,d.item_code,d.oper_code_item,d.size_code, d.colour_code, d.season_code,d.puom,
                            0           stock_ini,
                            0           value_ini,
                            SUM(
                               (CASE
                                   WHEN d.reason_code IN ('+IRECCUST') THEN d.qty
                                   ELSE                        0
                                END
                               )
                               )        qty_in,
                            SUM(
                               (CASE
                                   WHEN d.reason_code IN ('+IRECCUST') THEN    d.qty * r.price_doc_puom
                                   ELSE                        0
                                END
                               )
                               )        val_in,
                            SUM(
                               (CASE
                                   WHEN    d.reason_code NOT IN ('+IRECCUST') AND d.trn_sign = 1 THEN d.qty
                                   ELSE                        0
                                END
                               )
                               )        qty_in_x,
                            SUM(
                               (CASE
                                   WHEN    d.trn_sign = -1 THEN d.qty
                                   ELSE                        0
                                END
                               )
                               )        qty_out
                   ------------------------------------------------------------------------------------------------
                   FROM        WHS_TRN          h
                   INNER JOIN  WHS_TRN_DETAIL   d   ON  d.ref_trn   =   h.idriga
                   LEFT JOIN   RECEIPT_DETAIL   r   ON  r.idriga    =   d.ref_receipt
                   ------------------------------------------------------------------------------------------------
                   WHERE       h.date_legal    BETWEEN p_start_date
                                                   AND p_end_date
                       AND     d.org_code      =   p_org_code
                       AND     d.whs_code      =   p_whs_code
                       AND     h.flag_storno   =   'N'
                       AND     d.reason_code   IN  ('+IRECCUST', '+TRECCTLMF','+TRETCUST','+TRECCTLSP', '+IINVCUST', '+TSEA',
                                                    '-TWIPCUST', '-TSHPCTLCUST','-OSHPMP', '-OINVCUST', '-TSEA', '-OSHPMPP'
                                                    )
                   ------------------------------------------------------------------------------------------------
                   GROUP BY    --h.date_legal,
                               d.org_code,d.item_code,d.oper_code_item,d.size_code, d.colour_code, d.season_code, d.puom
            ) a
            INNER JOIN  ITEM    i   ON  i.org_code  =   a.org_code
                                    AND i.item_code =   a.item_code
            --
            WHERE   i.type_code     =   NVL(p_item_type, i.type_code)
                AND a.season_code   =   NVL(p_season_code, a.season_code)
            GROUP BY a.org_code,a.item_code,a.oper_code_item,a.size_code, a.colour_code, a.season_code,a.puom
            ORDER BY 1,2,5,4
            ;

    v_prev_yearmonth        VARCHAR2(10);
    v_start_date            DATE;
    v_row_cst               ITEM_COST%ROWTYPE;
    v_row_rep               VW_REP_AC_BALANCE%ROWTYPE;
    v_row_per               AC_PERIOD%ROWTYPE;
BEGIN

    p_clear_fucking_dupl;

    -- parameter check
    IF p_org_code IS NULL OR p_whs_code IS NULL OR p_yearmonth IS NULL THEN
        Pkg_Err.p_rae('Parametrii GESTIUNE, MAGAZIE si AN_LUNA sunt obligatorii!');
    END IF;

    v_row_per.period_type   :=  'MONTH';
    v_row_per.period_code   :=  p_yearmonth;
    Pkg_Get2.p_get_ac_period_2(v_row_per);


    -- determine the last period code
    v_prev_yearmonth        :=  TO_CHAR(ADD_MONTHS(TO_DATE(p_yearmonth,'YYYYMM'), -1),'YYYYMM');
    v_start_date            :=  TO_DATE(p_yearmonth,'YYYYMM');

    -- get the start period stocks
    Pkg_Mov.p_stoc_past(p_org_code      =>  p_org_code,
                        p_item_code     =>  '',
                        p_group_code    =>  '',
                        p_whs_code      =>  p_whs_code,
                        p_season_code   =>  '',
                        p_ref_date      =>  v_start_date - 1
                        );

    IF NVL(p_only_rep,'N') = 'N' THEN
        FOR x IN C_LINES(p_org_code, p_whs_code, v_start_date, LAST_DAY(v_start_date),v_prev_yearmonth)
        LOOP
            v_row_cst.cost_code         :=  'CMP';
            v_row_cst.period_code       :=  p_yearmonth;
            v_row_cst.org_code          :=  x.org_code;
            v_row_cst.item_code         :=  x.item_code;
            v_row_cst.oper_code_item    :=  x.oper_code_item;
            v_row_cst.unit_cost         :=  x.cmp;
            v_row_cst.uom_code          :=  x.puom;
            v_row_cst.size_code         :=  x.size_code;
            v_row_cst.colour_code       :=  x.colour_code;
            v_row_cst.season_code       :=  x.season_code;

            Pkg_Iud.p_item_cost_iud('I', v_row_cst);

        END LOOP;

        p_clear_fucking_dupl;

    ELSE

        DELETE FROM VW_REP_AC_BALANCE;

        v_row_rep.rep_title :=  'BALANTA ANALITICA A VALORILOR MATERIALE (14-6-30/c)'||Pkg_Glb.C_NL||
                                'la data de '||TO_CHAR(LEAST(LAST_DAY(v_start_date),SYSDATE),'dd/mm/yyyy');
        IF v_row_per.status <> 'C' THEN
            v_row_rep.rep_title :=  v_row_rep.rep_title || Pkg_Glb.C_NL||
                'ATENTIE !!! Luna nu este inchisa !!!';
        END IF;

        v_row_rep.rep_info  :=  RPAD('Gestiune:',20)||p_org_code||Pkg_Glb.C_NL||
                                RPAD('Magazie:',20) ||p_whs_code||Pkg_Glb.C_NL||
                                RPAD('Perioada:',20)||  TO_CHAR(v_start_date,'dd/mm/yyyy')||' - '||
                                                        TO_CHAR(LAST_DAY(v_start_date),'dd/mm/yyyy')||Pkg_Glb.C_NL||
                                RPAD('Tip Cod:',20) ||NVL(p_item_type,'Toate')||Pkg_Glb.C_NL||
                                RPAD('Stagiune:',20)||NVL(p_season_code,'Toate')
                                ;
        v_row_rep.org_code  :=  p_org_code;
        v_row_rep.segment_code :=   'VW_REP_AC_BALANCE';

        FOR x IN C_LINES(p_org_code, p_whs_code, v_start_date, LAST_DAY(v_start_date),v_prev_yearmonth)
        LOOP
            v_row_rep.item_code     :=  x.item_code||' '||x.oper_code_item;
            v_row_rep.description   :=  x.i_description;
            v_row_rep.item_attrib   :=  RPAD(NVL(x.season_code,' '),5)||
                                        RPAD(NVL(x.size_code,' '),4)||
                                        x.colour_code;
            v_row_rep.uom_code      :=  x.puom;
            v_row_rep.currency_code :=  '';
            v_row_rep.stock_qty_ini :=  x.stock_ini;
            v_row_rep.stock_val_ini :=  ROUND(x.value_ini,4);
            v_row_rep.stock_qty_fin :=  x.stock_ini + x.qty_in + x.qty_in_x - x.qty_out;
            v_row_rep.stock_val_fin :=  ROUND(v_row_rep.stock_qty_fin * x.cmp,4);
            v_row_rep.mov_qty_in    :=  x.qty_in + x.qty_in_x;
            v_row_rep.mov_val_in    :=  ROUND(x.value_in + x.qty_in_x * x.cmp ,4);
            v_row_rep.mov_qty_out   :=  x.qty_out;
            v_row_rep.mov_val_out   :=  ROUND(x.qty_out*x.cmp, 4);
            v_row_rep.cmp           :=  ROUND(x.cmp,4);

            INSERT INTO VW_REP_AC_BALANCE VALUES v_row_rep;

        END LOOP;
    END IF;

    IF p_commit = 'Y' THEN COMMIT; END IF;



EXCEPTION WHEN OTHERS THEN
    IF p_commit = 'Y' THEN ROLLBACK; END IF;
    Pkg_Err.p_rae(Pkg_Err.f_err_msg(SQLCODE, SQLERRM));
END;


/**********************************************************************************************
    DDL:    05/10/2008  d   Create date
/*********************************************************************************************/
PROCEDURE p_close_month (   p_yearmonth     VARCHAR2)
----------------------------------------------------------------------------------------------
--  PURPOSE:
----------------------------------------------------------------------------------------------
IS
    CURSOR C_SBU    IS
                    SELECT  o.org_code
                    FROM    ORGANIZATION    o
                    WHERE   flag_sbu        =   'Y'
                    ;

    CURSOR C_WHS    IS
                    SELECT  w.whs_code
                    FROM    WAREHOUSE       w
                    WHERE   w.CATEGORY_CODE IN  ('MPP', 'MPC')
                    ;

    CURSOR C_OPEN_TRN
                    IS
                    SELECT  *
                    FROM    VW_PREP_LOG_VS_AC
                    WHERE   ac_org_code IS NULL
                        AND flag_storno = 'N'
                    ORDER BY date_legal
                    ;

    v_row_per_prev  AC_PERIOD%ROWTYPE;
    v_row_per       AC_PERIOD%ROWTYPE;
BEGIN
    -- get the period row
    v_row_per.period_code       :=  p_yearmonth;
    v_row_per.period_type       :=  'MONTH';
    Pkg_Get2.p_get_ac_period_2  (v_row_per);

    -- get the previous period row
    v_row_per_prev.period_code       :=  TO_CHAR(ADD_MONTHS(TO_DATE(p_yearmonth,'YYYYMM'),-1), 'YYYYMM');
    v_row_per_prev.period_type       :=  'MONTH';
    Pkg_Get2.p_get_ac_period_2  (v_row_per_prev);

    -- checks
    IF v_row_per_prev.status = 'I' THEN
        Pkg_Err.p_rae('Nu se poate efectua operatiunea ! Luna precedenta nu este inchisa!');
    END IF;
    IF v_row_per.status = 'C' THEN
        Pkg_Err.p_rae('Nu se poate efectua operatiunea ! Luna '||v_row_per.description||' este deja inchisa !');
    END IF;

    -- check if all the logistic transactions are closed
    Pkg_Ac.p_prep_log_vs_ac(p_yearmonth);
    FOR x IN C_OPEN_TRN
    LOOP
        Pkg_Err.p_err(  'Gest:'||x.org_code||' Tip: '||x.trn_type||' Data: '||TO_CHAR(x.date_legal,'dd/mm/yyyy')
                        ||' Cod: '||x.trn_code||' Doc: '||x.log_doc_info,
                        'Exista Miscari Logistice pentru care trebuie sa generati documente contabile');
    END LOOP;
    Pkg_Err.p_rae;

    FOR x IN C_SBU
    LOOP
        FOR xx IN C_WHS
        LOOP
            Pkg_Ac.p_generate_pmp(  p_yearmonth     => p_yearmonth,
                                    p_org_code      => x.org_code,
                                    p_whs_code      => xx.whs_code,
                                    p_item_type     => '',
                                    p_season_code   => '',
                                    p_only_rep      => 'N',
                                    p_commit        => 'N'
                                    );
        END LOOP;
    END LOOP;

    -- update the status
    v_row_per.status            :=  'C';
    Pkg_Iud.p_ac_period_iud('U',v_row_per);

    COMMIT;

EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    Pkg_Err.p_rae(Pkg_Err.f_err_msg(SQLCODE, SQLERRM));
END;


/**********************************************************************************************
    DDL:    14/10/2008  d   Create date
            01/07/2009  d   check on next month
/*********************************************************************************************/
PROCEDURE p_open_month (   p_yearmonth VARCHAR2)
IS

    v_row_per       AC_PERIOD%ROWTYPE;
    v_row_per_next  AC_PERIOD%ROWTYPE;

BEGIN
    -- get the period row
    v_row_per.period_code       :=  p_yearmonth;
    v_row_per.period_type       :=  'MONTH';
    Pkg_Get2.p_get_ac_period_2  (v_row_per);

    -- get the next period row
    v_row_per_next.period_code  :=  TO_CHAR(ADD_MONTHS(TO_DATE(p_yearmonth,'YYYYMM'),+1), 'YYYYMM');
    v_row_per_next.period_type  :=  'MONTH';
    Pkg_Get2.p_get_ac_period_2  (v_row_per_next);

    --check if the next month is closed
    IF v_row_per_next.status    =   'C' THEN
        Pkg_Err.p_rae('Nu se poate efectua operatiunea ! Luna urmatoare '||v_row_per_next.description||' este inchisa !');
    END IF;

    -- delete CMP
    DELETE
    FROM    ITEM_COST
    WHERE   cost_code   =   'CMP'
        AND period_code =   p_yearmonth
    ;

    -- update the status
    v_row_per.status            :=  'I';
    Pkg_Iud.p_ac_period_iud('U',v_row_per);

    COMMIT;

EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    Pkg_Err.p_rae(Pkg_Err.f_err_msg(SQLCODE, SQLERRM));
END;


PROCEDURE p_auto_generate_doc   (   p_year_month VARCHAR2)
IS
    CURSOR C_LINES  IS
                    SELECT  *
                    FROM    VW_PREP_LOG_VS_AC
                    WHERE   ac_org_code IS NULL
                        AND flag_storno = 'N'
                    ORDER BY date_legal
                    ;

BEGIN
    Pkg_App_Secur.p_test_grant('APP_ADMIN');

    Pkg_Ac.p_prep_log_vs_ac(p_year_month);

    FOR x IN C_LINES
    LOOP
        Pkg_Ac.p_ac_engine(x.ref_trn,'N');
    END LOOP;
END;




/*scripts:

1. generates accounting months for an year

BEGIN
FOR x IN 1..12
LOOP
    INSERT INTO ac_period(period_type,period_code,description,status, start_date, end_date)
    VALUES ('MONTH',
            '2008'||LPAD(x,2,'0'),
            '2008 '||TO_CHAR(TO_DATE(x,'MM'),'MONTH'),
            'I',
            TO_DATE('01'||LPAD(x,2,'0')||'2008','ddmmyyyy'),
            LAST_DAY(TO_DATE('01'||LPAD(x,2,'0')||'2008','ddmmyyyy'))
            );
END LOOP;
END;
*/





END;

/

/
